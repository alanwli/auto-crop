#!/bin/bash

# set default values 
coords=""			# initial coord for finding background color
bcolor=""      			# initial background color
fuzzval=10 				# fuzz amount in percent for making background transparent
grid=10					# grid spacing in percent image
discard=""				# discard small regions
prune=""				# prune out noise in mask
mask=""					# view, save, output
unrotate=3				# 1=deskew 2=unrotate
debug="false"

# set directory for temporary files
dir="."    # suggestions are dir="." or dir="/tmp"

# set up functions to report Usage and Usage with Description
PROGNAME=`type $0 | awk '{print $3}'`  # search for executable on path
PROGDIR=`dirname $PROGNAME`            # extract directory of program
PROGNAME=`basename $PROGNAME`          # base name of program
usage1() 
	{
	#echo >&2 ""
	#echo >&2 "$PROGNAME:" "$@"
	sed >&2 -e '1,/^####/d;  /^###/g;  /^#/!q;  s/^#//;  s/^ //;  4,$p' "$PROGDIR/$PROGNAME"
	}
usage2() 
	{
	#echo >&2 ""
	#echo >&2 "$PROGNAME:" "$@"
	sed >&2 -e '1,/^####/d;  /^######/g;  /^#/!q;  s/^#*//;  s/^ //;  4,$p' "$PROGDIR/$PROGNAME"
	}

# function to report error messages
errMsg()
	{
	#echo ""
	#echo $1
	#echo ""
	#usage1
	exit 1
	}

# function to test for minus at start of value of second part of option 1 or 2
checkMinus()
	{
	test=`echo "$1" | grep -c '^-.*$'`   # returns 1 if match; 0 otherwise
    [ $test -eq 1 ] && errMsg "$errorMsg"
	}

# test for correct number of arguments and get values
if [ $# -eq 0 ]
	then
	# help information
	#echo ""
	usage2
	exit 0
elif [ $# -gt 18 ]
	then
	errMsg "--- TOO MANY ARGUMENTS WERE PROVIDED ---"
else
	while [ $# -gt 0 ]
		do
		# get parameters
		case "$1" in
	  -h|-help)    # help information
				   #echo ""
				   usage2
				   ;;
			-f)    # fuzzval
				   shift  # to get the next parameter
				   # test if parameter starts with minus sign 
				   errorMsg="--- INVALID FUZZVAL SPECIFICATION ---"
				   checkMinus "$1"
				   fuzzval=`expr "$1" : '\([0-9]*\)'`
				   [ "$fuzzval" = "" ] && errMsg "--- FUZZVAL=$fuzzval MUST BE A NON-NEGATIVE INTEGER VALUE (with no sign) ---"
				   fuzzvaltestA=`echo "$fuzzval < 0" | bc`
				   fuzzvaltestB=`echo "$fuzzval > 100" | bc`
				   [ $fuzzvaltestA -eq 1 -a $fuzzvaltestB -eq 1 ] && errMsg "--- FUZZVAL=$fuzzval MUST BE A NON-NEGATIVE INTEGER VALUE BETWEEN 0 AND 100 ---"
				   ;;
			-c)    # coords
				   shift  # to get the next parameter
				   # test if parameter starts with minus sign 
				   errorMsg="--- INVALID COORDS SPECIFICATION ---"
				   checkMinus "$1"
				   coords=$1
				   # further testing done later
				   ;;
			-b)    # bcolor
				   shift  # to get the next parameter
				   # test if parameter starts with minus sign
				   errorMsg="--- INVALID BCOLOR SPECIFICATION ---"
				   checkMinus "$1"
				   bcolor=$1
				   ;;
			-g)    # grid
				   shift  # to get the next parameter
				   # test if parameter starts with minus sign 
				   errorMsg="--- INVALID GRID SPECIFICATION ---"
				   checkMinus "$1"
				   grid=`expr "$1" : '\([0-9]*\)'`
				   [ "$grid" = "" ] && errMsg "--- GRID=$grid MUST BE A NON-NEGATIVE INTEGER VALUE (with no sign) ---"
				   gridtestA=`echo "$grid <= 0" | bc`
				   gridtestB=`echo "$grid >= 100" | bc`
				   [ $gridtestA -eq 1 -a $gridtestB -eq 1 ] && errMsg "--- GRID=$grid MUST BE A NON-NEGATIVE INTEGER VALUE LARGER THAN 0 AND SMALLER THAN 100 ---"
				   ;;
			-d)    # discard
				   shift  # to get the next parameter
				   # test if parameter starts with minus sign 
				   errorMsg="--- INVALID DISCARD SPECIFICATION ---"
				   checkMinus "$1"
				   discard=`expr "$1" : '\([0-9]*\)'`
				   [ "$discard" = "" ] && errMsg "--- DISCARD=$discard MUST BE A NON-NEGATIVE INTEGER VALUE (with no sign) ---"
				   testA=`echo "$discard < 1" | bc`
				   [ $testA -eq 1 ] && errMsg "--- DISCARD=$discard MUST BE A NON-NEGATIVE INTEGER VALUE GREATER THAN 0 ---"
				   ;;
			-p)    # prune
				   shift  # to get the next parameter
				   # test if parameter starts with minus sign 
				   errorMsg="--- INVALID PRUNE SPECIFICATION ---"
				   checkMinus "$1"
				   prune=`expr "$1" : '\([0-9]*\)'`
				   [ "$prune" = "" ] && errMsg "--- PRUNE=$prune MUST BE A NON-NEGATIVE INTEGER VALUE (with no sign) ---"
				   testA=`echo "$prune < 2" | bc`
				   [ $testA -eq 1 ] && errMsg "--- PRUNE=$prune MUST BE A NON-NEGATIVE INTEGER VALUE GREATER THAN 1 ---"
				   ;;
			-u)    # unrotate
				   shift  # to get the next parameter
				   # test if parameter starts with minus sign 
				   errorMsg="--- INVALID UNROTATE SPECIFICATION ---"
				   checkMinus "$1"
				   unrotate=`expr "$1" : '\([0-9]\)'`
				   [ $unrotate -lt 1 -a $unrotate -gt 3 ] && errMsg "--- UNROTATE=$unrotate MUST BE EITHER 1, 2 OR 3 ---"
				   ;;
			-m)    # mask
				   shift  # to get the next parameter
				   # test if parameter starts with minus sign 
				   errorMsg="--- INVALID MASK SPECIFICATION ---"
				   checkMinus "$1"
				   mask=`echo "$1" | tr "[:upper:]" "[:lower:]"`
				   [ "$mask" != "view" -a "$mask" != "save" -a "$mask" != "output"  ] && errMsg "--- MASK=$mask MUST BE EITHER VIEW, SAVE OR OUTPUT ---"
				   ;;
			 -)    # STDIN and end of arguments
				   break
				   ;;
			-*)    # any other - argument
				   errMsg "--- UNKNOWN OPTION ---"
				   ;;
			*)     # end of arguments
				   break
				   ;;
		esac
		shift   # next option
	done
	# get infile and outfile
	infile="$1"
	outfile="$2"
fi

# test if both bcolor and coords specified at the same time
if [ "X$bcolor" != "X" -a "X$coords" != "X" ]; then
  errMsg "--- BACKGROUND COLOR AND COODINATES CAN NOT BE USED TOGETHER ---"
elif [ "X$bcolor" = "X" -a "X$coords" = "X" ]; then
	coords="0,0"
fi

# test that infile provided
[ "$infile" = "" ] && errMsg "NO INPUT FILE SPECIFIED"

# test that outfile provided
[ "$outfile" = "" ] && errMsg "NO OUTPUT FILE SPECIFIED"

# set up temp file
tmpA1="$dir/multicrop_1_$$.mpc"
tmpB1="$dir/multicrop_1_$$.cache"
tmpA2="$dir/multicrop_2_$$.mpc"
tmpB2="$dir/multicrop_2_$$.cache"
tmpA3="$dir/multicrop_3_$$.mpc"
tmpB3="$dir/multicrop_3_$$.cache"
tmpA4="$dir/multicrop_4_$$.mpc"
tmpB4="$dir/multicrop_4_$$.cache"
tmpA5="$dir/multicrop_5_$$.mpc"
tmpB5="$dir/multicrop_5_$$.cache"

trap "rm -f $tmpA1 $tmpB1 $tmpA2 $tmpB2 $tmpA3 $tmpB3 $tmpA4 $tmpB4 $tmpA5 $tmpB5;" 0
trap "rm -f $tmpA1 $tmpB1 $tmpA2 $tmpB2 $tmpA3 $tmpB3 $tmpA4 $tmpB4 $tmpA5 $tmpB5; exit 1" 1 2 3 15
trap "rm -f $tmpA1 $tmpB1 $tmpA2 $tmpB2 $tmpA3 $tmpB3 $tmpA4 $tmpB4 $tmpA5 $tmpB5; exit 1" ERR

mime_type=`file --mime-type -b $infile`

if [ "$mime_type" != "image/jpeg" -a "$mime_type" != "image/png" ]; then
  echo >&2 "uploaded file is not a jpeg or png file"
  exit 1
fi

# read the input image into the temp files and test validity.
convert -quiet "$infile" +repage "$tmpA1" ||
	errMsg "--- FILE $infile1 DOES NOT EXIST OR IS NOT AN ORDINARY FILE, NOT READABLE OR HAS ZERO SIZE  ---"


# get im_version
im_version=`convert -list configure | \
	sed '/^LIB_VERSION_NUMBER /!d; s//,/;  s/,/,0/g;  s/,0*\([0-9][0-9]\)/\1/g' | head -n 1`

# get output filename and suffix
outnameArr=(`echo "$outfile" | sed -n 's/^\(.*\)[.]\([^.]*\)$/\1 \2/p'`)
outname="${outnameArr[0]}"
suffix="${outnameArr[1]}"
#echo "outname=$outname"
#echo "suffix=$suffix"

# get image width and height
width=`identify -ping -format "%w" $tmpA1`
height=`identify -ping -format "%h" $tmpA1`


# get color at user specified location
if [ "X$bcolor" != "X" ]; then
	coords="0,0"
else
	widthm1=`convert xc: -format "%[fx:$width-1]" info:`
	heightm1=`convert xc: -format "%[fx:$height-1]" info:`
	midwidth=`convert xc: -format "%[fx:round(($width-1))/2]" info:`
	midheight=`convert xc: -format "%[fx:round(($height-1))/2]" info:`
	coords=`echo "$coords" | tr "[:upper:]" "[:lower:]"`
	case "$coords" in
		''|nw|northwest) coords="0,0" ;;
		n|north)         coords="$midwidth,0" ;;
		ne|northeast)    coords="$widthm1,0" ;;
		e|east)          coords="$widthm1,$midheight" ;;
		se|southeast)    coords="$widthm1,$heightm1" ;;
		s|south)         coords="$midwidth,$heightm1" ;;
		sw|southwest)    coords="0,$heightm1" ;;
		w|west)          coords="0,$midheight" ;;
		[0-9]*,[0-9]*)   coords=$coords ;;
		*)  errMsg "--- INVALID COORDS ---" ;;
	esac
	bcolor=`convert $tmpA1 -format "%[pixel:u.p{$coords}]" info:`
fi
#echo "bcolor=$bcolor"


# get grid spacing
wg=`convert xc: -format "%[fx:round($grid*$width/100)]" info:`
hg=`convert xc: -format "%[fx:round($grid*$height/100)]" info:`
num=`convert xc: -format "%[fx:round(100/$grid) - 2]" info:`
#echo "width=$width; height=$height; wg=$wg; hg=$hg; num=$num"


# set up pruning
if [ "$prune" != "" ]; then
	prune=`convert xc: -format "%[fx:$prune/2]" info:`
	pruneproc="-channel rgba -morphology open disk:$prune"
else
	pruneproc=""
fi

# set up floodfill
if [ "$im_version" -ge "07000000" ]; then
	matte_alpha="alpha"
else
	matte_alpha="matte"
fi

# add a border, and flood fill from all edges inward
convert $tmpA1 -fuzz ${fuzzval}% -fill none \
	-bordercolor $bcolor -border 1x1 \
	-draw "$matte_alpha $coords floodfill" \
	-shave 1x1 -fill red +opaque none \
	-background black -alpha background \
	$pruneproc \
	$tmpA2

if [ "$mask" = "view" ]; then
	display $tmpA2
elif [ "$mask" = "save" ]; then
	convert $tmpA2 ${outname}_mask.gif
elif [ "$mask" = "output" ]; then
	convert $tmpA2 ${outname}_mask.gif
	exit 0
fi

# set up for unrotate 1 or 3
if [ $unrotate -eq 1 ]; then
	derotate="-deskew 40%"
elif [ $unrotate -eq 3 ]; then
	derotate=""
fi


#echo ""
# loop over grid and floodfill and trim to get individual mask for each image
k=0
y=0
for ((j=0;j<=$num;j++))
	do
 	x=0
 	y=$(($y + $hg))
	for ((i=0;i<=$num;i++))
		do
		kk=`printf "%03d" "$k"`
		x=$(($x + $wg))
		# test if found color other than "none" (i.e. red)
		testcolorval=`convert $tmpA2 -channel rgba -alpha on -format \
			"%[pixel:u.p{$x,$y}]" info:` 
		testcolor=`convert xc: -format  "%[fx:$testcolorval=="none"?0:1]" info:` 
		if [ $testcolor -eq 1 ]; then
			#echo "Processing Image $k"
			# Take red and none mask.
			# Floodfill the local red region with white.
			convert $tmpA2 -channel rgba -alpha on -fill "white" \
				-draw "color $x,$y floodfill" $tmpA3
			# Fill anything not white with transparency and 
			# turn transparency off so black.
			# Then clone and trim to bounds of white.
			# Then fill any black with white.
			# Then flatten back onto white and black image so that any white 
			# areas eaten away are filled with white.
			# Note flatten uses the virtual canvas left by -trim so that it 
			# goes back into the right location.
			convert \( $tmpA3 -channel rgba -alpha on \
				-fill none +opaque white -alpha off \) \
				\( +clone -trim -fill white -opaque black -write $tmpA5 \) \
				-flatten $tmpA4
			# Print size and page geometry
			wd=`identify -ping -format "%w" $tmpA5`
			ht=`identify -ping -format "%h" $tmpA5`
			pg=`identify -ping -format "%g" $tmpA5`
			#echo "Size: ${wd}x${ht}"  
			#echo "Page Geometry: $pg"
			#echo ""
			# Composite the black and white mask onto the original scan.
			# Then trim and deskew/unrotate to make the output.
			if [ $unrotate -eq 1 -o $unrotate -eq 3 ]; then
				convert $tmpA1 $tmpA4 -compose multiply -composite \
					-fuzz ${fuzzval}% -trim -background "$bcolor" $derotate \
					-compose over -bordercolor "$bcolor" -border 2 -trim +repage \
					${kk}.${suffix}
			elif [ $unrotate -eq 2 ]; then
				convert $tmpA1 $tmpA4 -compose multiply -composite \
					-fuzz ${fuzzval}% -trim miff:- | \
				unrotate -f ${fuzzval}% - "${kk}.${suffix}"
			fi
			# Fill the selected photo area in the red/none mask with none 
			# for use with next coordinate so that it does not find it again.
			convert $tmpA3 -channel rgba -alpha on -fill none -opaque white $tmpA2
			if [ "$discard" = "" ]; then
				k=$(($k + 1))
			elif [ $wd -lt $discard -o $ht -lt $discard ]; then 
				rm -f ${kk}.${suffix}
				#echo "Discarding Image $k"
			else
				k=$(($k + 1))
			fi
		fi
	done
done
echo "$k"
exit 0



